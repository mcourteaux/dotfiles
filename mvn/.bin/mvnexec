#!/bin/bash

#
# Execute clases with main method inside maven project.
#

# debug {{{
eval SCRIPT_DEBUG="\$$(basename $0 | tr - _)_DEBUG"
SCRIPT_DEBUG=${SCRIPT_DEBUG:--1}

if [ "$SCRIPT_DEBUG" -ge 1 ]
then
   set -x
fi
if [ "$SCRIPT_DEBUG" -ge 10 ]
then
   set -v
fi
#}}}

# init {{{
VERSION=1.1
COMPILE="yes"
CLEAN="no"
SEARCH_MAIN="yes"
SEARCH_TEST="yes"
FILTER_NAME_PROG="cat -"
AUTO="no"
LIST="no"
SEPARATOR=":"
# }}}

# functions {{{
function help {
   local scriptname="$(basename $0)"
   cat >&2 <<EOF

$scriptname [options] [args]

version: $VERSION

Execute clases with main method inside maven project.

Options:
   -c, --clean           Do clean compilation
   -q, --quiet           Be quiet. Don't show [INFO] messages.
   -B, --no-build        Avoid building.
   -M, --no-main         Don't search on src/main/java.
   -T, --no-test         Don't search on src/test/java.
   -f, --filter-name     Name filter for classes.
   -a, --auto            If there is only one match launch it.
   -l, --list            Just output found classes with main method.
       --win-separator   Use ; as classpath separator

Examples:

 # lauch quietly
 $ $scriptname -q
 # launch with force clean compilation
 $ $scriptname -C

EOF
}

function errorJavaExecutable() {
   echo cannot locate java. Set JDK_HOME or JAVA_HOME or add java to path.
   exit 1
}

function testJavaExec() {
   test -x "$1/bin/java"
}

function setJavaExecutable() {
   if [ -z "$1" ] || ! testJavaExec "$1"
   then
      errorJavaExecutable
   else
      JAVA="$1/bin/java"
   fi
}

function findMainClasses() {
   if [ -d $1 ]
   then
      grep " main *(" -R "$1" --exclude-dir=.git --exclude-dir=.svn --exclude-dir=.cvs --include=*.java | \
         cut -d ':' -f 1 | $FILTER_NAME_PROG | sed 's+'$1'/++;s/.java$//' | tr / . | sort
   fi
}

function dependencyClasspath() {
   IFS=. read major minor extra < <($JAVA -version 2>&1 | awk -F '"' '/version/ {print $2}')
   if [ "$major" == 1 ] && [[ "$minor" > 5 ]]
   then
      echo 'target/dependency/*'
   else
      for i in target/dependency/*.jar
      do
         echo -n $i$SEPARATOR
      done | sed 's/'${SEPARATOR}'$//'
   fi
}

function launch() {
   PHASES=""
   if [ "$CLEAN" == "yes" ]
   then
      PHASES="$PHASES clean"
   fi
   if [ "$COMPILE" == "yes" ]
   then
      PHASES="$PHASES compile"
   fi
   #mvn $QUIET $PHASES exec:java -Dexec.executable="$JAVA" -Dexec.workingdir="." -Dexec.args="-cp target/classes${SEPARATOR}target/test-classes${SEPARATOR}$(dependencyClasspath) ${CLASS}${ARGS} $*"
   mvn -T 1C $QUIET $PHASES -e exec:java -Dexec.mainClass="$CLASS" ${ARGS} $*
}
# }}}

# parse args {{{
TEMP=$(getopt -o "qBTf:aClh" -l quiet,no-build,no-test,filter-name:,auto,clean,win-separator,list,help -n $(basename $0) -- "$@")

EXIT=$?
if [ $EXIT != 0 ]
then
   help
   exit $EXIT
fi

# process script arguments
eval set -- "$TEMP"

while true
do
   case "$1" in
      -C|--clean)
         CLEAN="yes"
         ;;
      -B|--no-build)
         COMPILE="no"
         ;;
      -q|--quiet)
         QUIET="-q"
         ;;
      -M|--no-main)
         SEARCH_MAIN="no"
         ;;
      -T|--no-test)
         SEARCH_TEST="no"
         ;;
      -f|--filter-name)
         ARG=$2
         shift
         FILTER=$ARG
         FILTER_NAME_PROG="grep -i $FILTER"
         ;;
      -a|--auto)
         AUTO="yes"
         ;;
      -l|--list)
         LIST="yes"
         ;;
      --win-separator)
         SEPARATOR=";"
	 ;;
      -h|--help)
         help
         exit
         ;;
      --)
         shift
         break ;;
      *)
         cat <&2 <<EOF

Error, unknow arguments $1
EOF
         help
         exit 1
         ;;
   esac
   shift
done
# }}}

# exec {{{
if [ -n "$JDK_HOME" ]
then
   setJavaExecutable "$JDK_HOME"
elif [ -n "$JAVA_HOME" ]
then
   setJavaExecutable "$JAVA_HOME"
elif command -v java >&-
then
   JAVA=$(command -v java >&-)
else
   errorJavaExecutable
fi


if [ $SEARCH_MAIN == "yes" ]
then
   FOUNDCLASSES=$(findMainClasses src/main/java)
fi

if [ $SEARCH_TEST == "yes" ]
then
   TESTCLASSES=$(findMainClasses src/test/java)
   if [ -n "$TESTCLASSES" ]
   then
      if [ -n "$FOUNDCLASSES" ]
      then
         FOUNDCLASSES="$FOUNDCLASSES
$TESTCLASSES"
      else
         FOUNDCLASSES=$TESTCLASSES
      fi
   fi
fi

if [ -z "$FOUNDCLASSES" ]
then
   echo
   echo no classes with main method in $PWD
   if [ -n "$FILTER" ]
   then
      echo using filter: $FILTER
   fi
   echo
   exit 1
fi

if [ $LIST == "yes" ]
then
   for C in $FOUNDCLASSES; do
       echo $C
   done
   exit 0
fi

if [ $AUTO == "yes" ] && ! [[ "$FOUNDCLASSES" == *$'\n'* ]]
then
   CLASS=$FOUNDCLASSES
   launch $*
   exit
fi

select CLASS in ${FOUNDCLASSES}
do
   if [ -z "$CLASS" ]
   then
      if [ "$REPLY" == "salir" ]
      then
         break
      else
         echo unknow option
         continue
      fi
   fi
   launch
   break
done
# }}}
# vim: fdm=marker
# vim: syntax=sh
